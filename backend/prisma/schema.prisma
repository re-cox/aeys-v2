generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:aydem123@localhost:5432/aeysv2"
}

model User {
  id                    String             @id @default(uuid())
  email                 String             @unique
  name                  String?
  surname               String?
  passwordHash          String
  roleId                String
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  profilePictureUrl     String?
  approvedLeaves        AnnualLeave[]      @relation("LeaveApprover")
  annualLeaves          AnnualLeave[]      @relation("UserLeaves")
  attendances           Attendance[]
  customers             Customer[]
  uploadedDocuments     Document[]
  employee              Employee?
  createdFolders        Folder[]
  olusturduguHakedisler Hakedis[]          @relation("OlusturanHakedisler")
  onayladigiHakedisler  Hakedis[]          @relation("OnaylayanHakedisler")
  createdProposals      Proposal[]         @relation("ProposalCreator")
  tasks                 Task[]
  teknisyenDokumanlari  TeknisyenDokuman[]
  teknisyenRaporlari    TeknisyenRapor[]
  role                  Role               @relation(fields: [roleId], references: [id])
  assignedTasks         Task[]             @relation("TaskAssignee")
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model Department {
  id               String            @id @default(uuid())
  name             String
  description      String?
  parentId         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  parent           Department?       @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         Department[]      @relation("DepartmentHierarchy")
  employees        Employee[]
  projects         Project[]
  purchaseRequests PurchaseRequest[]
}

model Project {
  id                 String            @id @default(uuid())
  name               String
  description        String?
  status             ProjectStatus
  startDate          DateTime
  endDate            DateTime?
  budget             Float?
  departmentId       String
  customerId         String?
  siteId             String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  documents          Document[]
  hakedisler         Hakedis[]
  customer           Customer?         @relation(fields: [customerId], references: [id])
  department         Department        @relation(fields: [departmentId], references: [id])
  site               Site?             @relation(fields: [siteId], references: [id])
  proposals          Proposal[]
  purchaseRequests   PurchaseRequest[]
  tasks              Task[]
  teknisyenRaporlari TeknisyenRapor[]
}

model Task {
  id             String     @id @default(uuid())
  title          String
  description    String?
  status         TaskStatus
  priority       Priority
  startDate      DateTime?
  dueDate        DateTime?
  completedDate  DateTime?
  estimatedHours Float?
  actualHours    Float?
  projectId      String?
  createdById    String
  parentTaskId   String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  createdBy      User       @relation(fields: [createdById], references: [id])
  parentTask     Task?      @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks       Task[]     @relation("SubTasks")
  project        Project?   @relation(fields: [projectId], references: [id])
  assignees      User[]     @relation("TaskAssignee")
}

model Customer {
  id           String         @id @default(uuid())
  name         String
  email        String?
  phone        String?
  address      String?
  taxId        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  city         String?
  contactName  String?
  contactTitle String?
  country      String?
  district     String?
  notes        String?
  postalCode   String?
  status       CustomerStatus @default(ACTIVE)
  taxOffice    String?
  website      String?
  userId       String?
  contacts     Contact[]
  user         User?          @relation(fields: [userId], references: [id])
  documents    Document[]
  projects     Project[]
  proposals    Proposal[]
}

model Contact {
  id         String   @id @default(uuid())
  name       String
  position   String?
  email      String?
  phone      String?
  customerId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
}

model Attendance {
  id            String   @id @default(uuid())
  userId        String
  isHoliday     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  date          DateTime @db.Date
  hasOvertime   Boolean? @default(false)
  notes         String?
  overtimeEnd   String?
  overtimeStart String?
  status        String
  user          User     @relation(fields: [userId], references: [id])
}

model Folder {
  id          String     @id @default(uuid())
  name        String
  description String?
  color       String?
  icon        String?
  parentId    String?
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  documents   Document[] @relation("FolderDocuments")
  createdBy   User       @relation(fields: [createdById], references: [id])
  parent      Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id])
  children    Folder[]   @relation("FolderHierarchy")
}

model Document {
  id          String    @id @default(uuid())
  description String?
  fileUrl     String?
  projectId   String?
  customerId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String?
  content     String?
  createdById String
  folderId    String?
  mimeType    String?
  name        String
  size        Int       @default(0)
  type        String    @default("file")
  createdBy   User      @relation(fields: [createdById], references: [id])
  customer    Customer? @relation(fields: [customerId], references: [id])
  folder      Folder?   @relation("FolderDocuments", fields: [folderId], references: [id])
  project     Project?  @relation(fields: [projectId], references: [id])
}

model Site {
  id                 String           @id @default(uuid())
  name               String
  location           String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  inventory          Inventory[]
  projects           Project[]
  teknisyenRaporlari TeknisyenRapor[]
}

model Inventory {
  id          String       @id @default(uuid())
  name        String
  category    String
  quantity    Int
  unitPrice   Float?
  siteId      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignments Assignment[]
  site        Site?        @relation(fields: [siteId], references: [id])
}

model Assignment {
  id          String    @id @default(uuid())
  inventoryId String
  quantity    Int
  assignDate  DateTime
  returnDate  DateTime?
  isReturned  Boolean   @default(false)
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  employeeId  String
  employee    Employee  @relation("AssetAssignee", fields: [employeeId], references: [id])
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
}

model TeknisyenRapor {
  id          String              @id @default(uuid())
  baslik      String
  aciklama    String?
  durum       TeknisyenRaporDurum
  tarih       DateTime            @default(now())
  teknisyenId String
  projeId     String?
  siteId      String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  bitisTarihi DateTime?
  dokumanlar  TeknisyenDokuman[]
  proje       Project?            @relation(fields: [projeId], references: [id])
  site        Site?               @relation(fields: [siteId], references: [id])
  teknisyen   User                @relation(fields: [teknisyenId], references: [id])
}

model TeknisyenDokuman {
  id             String         @id @default(uuid())
  dosyaAdi       String
  dosyaUrl       String
  dosyaTipu      String
  dosyaBoyutu    Int
  raporId        String
  yuklayanId     String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  teknisyenRapor TeknisyenRapor @relation(fields: [raporId], references: [id], onDelete: Cascade)
  yuklayan       User           @relation(fields: [yuklayanId], references: [id])
}

model AnnualLeave {
  id           String      @id @default(uuid())
  userId       String
  startDate    DateTime    @db.Date
  endDate      DateTime    @db.Date
  status       LeaveStatus @default(PENDING)
  reason       String?
  requestedAt  DateTime    @default(now())
  approvedById String?
  approvedAt   DateTime?
  approvedBy   User?       @relation("LeaveApprover", fields: [approvedById], references: [id])
  user         User        @relation("UserLeaves", fields: [userId], references: [id])
}

model Employee {
  id                            String             @id @default(uuid())
  userId                        String             @unique
  position                      String?
  phoneNumber                   String?
  profilePictureUrl             String?
  tcKimlikNo                    String?            @unique
  hireDate                      DateTime?          @db.Date
  birthDate                     DateTime?          @db.Date
  address                       String?
  iban                          String?
  bloodType                     String?
  drivingLicense                String?
  education                     String?
  militaryStatus                String?
  salary                        Float?
  annualLeaveAllowance          Int?
  createdAt                     DateTime           @default(now())
  updatedAt                     DateTime           @updatedAt
  departmentId                  String?
  emergencyContactName          String?
  emergencyContactPhone         String?
  emergencyContactRelation      String?
  assignedAssets                Assignment[]       @relation("AssetAssignee")
  department                    Department?        @relation(fields: [departmentId], references: [id])
  user                          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents                     EmployeeDocument[]
  purchaseRequestsMade          PurchaseRequest[]  @relation("RequestsMade")
  purchaseRequestsStatusChanged PurchaseRequest[]  @relation("RequestsStatusChanged")
}

model EmployeeDocument {
  id         String   @id @default(uuid())
  employeeId String
  name       String
  type       String
  url        String
  size       Int
  uploadDate DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([employeeId])
}

model EdasNotification {
  id              String                 @id @default(uuid())
  refNo           String                 @unique
  company         String
  projectName     String?
  applicationType String
  customerName    String
  city            String?
  district        String?
  parcelBlock     String?
  parcelNo        String?
  status          String
  currentStep     String
  notes           String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  steps           EdasNotificationStep[]
}

model EdasNotificationStep {
  id             String                     @id @default(uuid())
  notificationId String
  stepType       String
  status         String
  notes          String?
  refNo          String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
  documents      EdasNotificationDocument[]
  notification   EdasNotification           @relation(fields: [notificationId], references: [id], onDelete: Cascade)
}

model EdasNotificationDocument {
  id           String               @id @default(uuid())
  fileUrl      String
  stepId       String
  fileName     String
  originalName String?
  documentType String?
  fileType     String
  fileSize     Int
  uploadedAt   DateTime             @default(now())
  step         EdasNotificationStep @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model PurchaseRequest {
  id                String                @id @default(uuid())
  requestNumber     String                @unique
  requesterId       String
  departmentId      String
  projectId         String?
  reason            String?
  requiredDate      DateTime?
  notes             String?
  status            PurchaseRequestStatus @default(PENDING)
  statusChangedById String?
  statusChangedAt   DateTime?
  rejectionReason   String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  department        Department            @relation(fields: [departmentId], references: [id])
  project           Project?              @relation(fields: [projectId], references: [id])
  requester         Employee              @relation("RequestsMade", fields: [requesterId], references: [id])
  statusChangedBy   Employee?             @relation("RequestsStatusChanged", fields: [statusChangedById], references: [id])
  items             PurchaseRequestItem[]
}

model PurchaseRequestItem {
  id                String          @id @default(uuid())
  purchaseRequestId String
  itemName          String
  quantity          Float
  unit              String
  estimatedPrice    Float?
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  purchaseRequest   PurchaseRequest @relation(fields: [purchaseRequestId], references: [id], onDelete: Cascade)
}

model Proposal {
  id             String         @id @default(uuid())
  proposalNo     String         @unique
  status         ProposalStatus @default(DRAFT)
  customerId     String
  projectId      String?
  issueDate      DateTime       @default(now())
  validUntilDate DateTime?
  totalAmount    Float          @default(0.0)
  notes          String?
  createdById    String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdBy      User           @relation("ProposalCreator", fields: [createdById], references: [id])
  customer       Customer       @relation(fields: [customerId], references: [id])
  project        Project?       @relation(fields: [projectId], references: [id])
  items          ProposalItem[]

  @@index([customerId])
  @@index([projectId])
  @@index([createdById])
}

model ProposalItem {
  id          String   @id @default(uuid())
  proposalId  String
  description String
  quantity    Float    @default(1.0)
  unitPrice   Float    @default(0.0)
  totalPrice  Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
}

model Hakedis {
  id              String       @id @default(uuid())
  hakedisNo       String       @unique
  projeId         String
  aciklama        String?
  hakedisTarihi   DateTime     @default(now())
  baslangicTarihi DateTime
  bitisTarihi     DateTime
  tutar           Float
  kdvOrani        Float        @default(0.20)
  kdvTutar        Float
  toplamTutar     Float
  paraBirimi      String       @default("TRY")
  durum           HakedisDurum @default(TASLAK)
  olusturanId     String
  onaylayanId     String?
  onayTarihi      DateTime?
  odemeTarihi     DateTime?
  odemeKanali     String?
  odemeReferansNo String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  olusturan       User         @relation("OlusturanHakedisler", fields: [olusturanId], references: [id])
  onaylayan       User?        @relation("OnaylayanHakedisler", fields: [onaylayanId], references: [id])
  proje           Project      @relation(fields: [projeId], references: [id])

  @@index([projeId])
  @@index([olusturanId])
  @@index([onaylayanId])
}

enum ProjectStatus {
  PLANNING
  STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeknisyenRaporDurum {
  TASLAK
  INCELENIYOR
  ONAYLANDI
  REDDEDILDI
  BEKLEMEDE
  FIYATLAR_GIRILDI
  FATURA_KESILDI
  IPTAL_EDILDI
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  LEAD
  POTENTIAL
}

enum PurchaseRequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum ProposalStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
}

enum HakedisDurum {
  TASLAK
  ONAY_BEKLIYOR
  ONAYLANDI
  ODENDI
  REDDEDILDI
  IPTAL_EDILDI
}
